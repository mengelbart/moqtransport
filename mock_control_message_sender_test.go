// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ControlMessageSender)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_control_message_sender_test.go github.com/mengelbart/moqtransport ControlMessageSender
//

package moqtransport

import (
	reflect "reflect"

	wire "github.com/mengelbart/moqtransport/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockControlMessageSender is a mock of ControlMessageSender interface.
type MockControlMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockControlMessageSenderMockRecorder
	isgomock struct{}
}

// MockControlMessageSenderMockRecorder is the mock recorder for MockControlMessageSender.
type MockControlMessageSenderMockRecorder struct {
	mock *MockControlMessageSender
}

// NewMockControlMessageSender creates a new mock instance.
func NewMockControlMessageSender(ctrl *gomock.Controller) *MockControlMessageSender {
	mock := &MockControlMessageSender{ctrl: ctrl}
	mock.recorder = &MockControlMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlMessageSender) EXPECT() *MockControlMessageSenderMockRecorder {
	return m.recorder
}

// close mocks base method.
func (m *MockControlMessageSender) close(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close", err)
}

// close indicates an expected call of close.
func (mr *MockControlMessageSenderMockRecorder) close(err any) *MockControlMessageSendercloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockControlMessageSender)(nil).close), err)
	return &MockControlMessageSendercloseCall{Call: call}
}

// MockControlMessageSendercloseCall wrap *gomock.Call
type MockControlMessageSendercloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageSendercloseCall) Return() *MockControlMessageSendercloseCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageSendercloseCall) Do(f func(error)) *MockControlMessageSendercloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageSendercloseCall) DoAndReturn(f func(error)) *MockControlMessageSendercloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// queueControlMessage mocks base method.
func (m *MockControlMessageSender) queueControlMessage(arg0 wire.ControlMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "queueControlMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// queueControlMessage indicates an expected call of queueControlMessage.
func (mr *MockControlMessageSenderMockRecorder) queueControlMessage(arg0 any) *MockControlMessageSenderqueueControlMessageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "queueControlMessage", reflect.TypeOf((*MockControlMessageSender)(nil).queueControlMessage), arg0)
	return &MockControlMessageSenderqueueControlMessageCall{Call: call}
}

// MockControlMessageSenderqueueControlMessageCall wrap *gomock.Call
type MockControlMessageSenderqueueControlMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageSenderqueueControlMessageCall) Return(arg0 error) *MockControlMessageSenderqueueControlMessageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageSenderqueueControlMessageCall) Do(f func(wire.ControlMessage) error) *MockControlMessageSenderqueueControlMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageSenderqueueControlMessageCall) DoAndReturn(f func(wire.ControlMessage) error) *MockControlMessageSenderqueueControlMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
