// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: MessageHandler)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_message_handler_test.go github.com/mengelbart/moqtransport MessageHandler
//

package moqtransport

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
	isgomock struct{}
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// handle mocks base method.
func (m *MockMessageHandler) handle(arg0 *Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "handle", arg0)
}

// handle indicates an expected call of handle.
func (mr *MockMessageHandlerMockRecorder) handle(arg0 any) *MockMessageHandlerhandleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handle", reflect.TypeOf((*MockMessageHandler)(nil).handle), arg0)
	return &MockMessageHandlerhandleCall{Call: call}
}

// MockMessageHandlerhandleCall wrap *gomock.Call
type MockMessageHandlerhandleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMessageHandlerhandleCall) Return() *MockMessageHandlerhandleCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMessageHandlerhandleCall) Do(f func(*Message)) *MockMessageHandlerhandleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMessageHandlerhandleCall) DoAndReturn(f func(*Message)) *MockMessageHandlerhandleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
