// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ObjectMessageParser)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -package moqtransport -self_package github.com/mengelbart/moqtransport -destination mock_object_message_parser.go github.com/mengelbart/moqtransport ObjectMessageParser
//

// Package moqtransport is a generated GoMock package.
package moqtransport

import (
	iter "iter"
	reflect "reflect"

	wire "github.com/mengelbart/moqtransport/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectMessageParser is a mock of ObjectMessageParser interface.
type MockObjectMessageParser struct {
	ctrl     *gomock.Controller
	recorder *MockObjectMessageParserMockRecorder
	isgomock struct{}
}

// MockObjectMessageParserMockRecorder is the mock recorder for MockObjectMessageParser.
type MockObjectMessageParserMockRecorder struct {
	mock *MockObjectMessageParser
}

// NewMockObjectMessageParser creates a new mock instance.
func NewMockObjectMessageParser(ctrl *gomock.Controller) *MockObjectMessageParser {
	mock := &MockObjectMessageParser{ctrl: ctrl}
	mock.recorder = &MockObjectMessageParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectMessageParser) EXPECT() *MockObjectMessageParserMockRecorder {
	return m.recorder
}

// Messages mocks base method.
func (m *MockObjectMessageParser) Messages() iter.Seq2[*wire.ObjectMessage, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].(iter.Seq2[*wire.ObjectMessage, error])
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *MockObjectMessageParserMockRecorder) Messages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockObjectMessageParser)(nil).Messages))
}

// SubscribeID mocks base method.
func (m *MockObjectMessageParser) SubscribeID() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeID indicates an expected call of SubscribeID.
func (mr *MockObjectMessageParserMockRecorder) SubscribeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeID", reflect.TypeOf((*MockObjectMessageParser)(nil).SubscribeID))
}

// TrackAlias mocks base method.
func (m *MockObjectMessageParser) TrackAlias() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackAlias")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackAlias indicates an expected call of TrackAlias.
func (mr *MockObjectMessageParserMockRecorder) TrackAlias() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackAlias", reflect.TypeOf((*MockObjectMessageParser)(nil).TrackAlias))
}

// Type mocks base method.
func (m *MockObjectMessageParser) Type() wire.StreamType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(wire.StreamType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockObjectMessageParserMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockObjectMessageParser)(nil).Type))
}
