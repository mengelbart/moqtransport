// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: SessionI)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -package moqtransport -self_package github.com/mengelbart/moqtransport -destination mock_session_internal_test.go github.com/mengelbart/moqtransport SessionI
//

// Package moqtransport is a generated GoMock package.
package moqtransport

import (
	reflect "reflect"

	wire "github.com/mengelbart/moqtransport/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionI is a mock of SessionI interface.
type MockSessionI struct {
	ctrl     *gomock.Controller
	recorder *MockSessionIMockRecorder
	isgomock struct{}
}

// MockSessionIMockRecorder is the mock recorder for MockSessionI.
type MockSessionIMockRecorder struct {
	mock *MockSessionI
}

// NewMockSessionI creates a new mock instance.
func NewMockSessionI(ctrl *gomock.Controller) *MockSessionI {
	mock := &MockSessionI{ctrl: ctrl}
	mock.recorder = &MockSessionIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionI) EXPECT() *MockSessionIMockRecorder {
	return m.recorder
}

// acceptAnnouncement mocks base method.
func (m *MockSessionI) acceptAnnouncement(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "acceptAnnouncement", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// acceptAnnouncement indicates an expected call of acceptAnnouncement.
func (mr *MockSessionIMockRecorder) acceptAnnouncement(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "acceptAnnouncement", reflect.TypeOf((*MockSessionI)(nil).acceptAnnouncement), arg0)
}

// acceptAnnouncementSubscription mocks base method.
func (m *MockSessionI) acceptAnnouncementSubscription(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "acceptAnnouncementSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// acceptAnnouncementSubscription indicates an expected call of acceptAnnouncementSubscription.
func (mr *MockSessionIMockRecorder) acceptAnnouncementSubscription(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "acceptAnnouncementSubscription", reflect.TypeOf((*MockSessionI)(nil).acceptAnnouncementSubscription), arg0)
}

// acceptSubscription mocks base method.
func (m *MockSessionI) acceptSubscription(arg0 uint64, arg1 *localTrack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "acceptSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// acceptSubscription indicates an expected call of acceptSubscription.
func (mr *MockSessionIMockRecorder) acceptSubscription(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "acceptSubscription", reflect.TypeOf((*MockSessionI)(nil).acceptSubscription), arg0, arg1)
}

// announce mocks base method.
func (m *MockSessionI) announce(arg0 *announcement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "announce", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// announce indicates an expected call of announce.
func (mr *MockSessionIMockRecorder) announce(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "announce", reflect.TypeOf((*MockSessionI)(nil).announce), arg0)
}

// getPath mocks base method.
func (m *MockSessionI) getPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// getPath indicates an expected call of getPath.
func (mr *MockSessionIMockRecorder) getPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPath", reflect.TypeOf((*MockSessionI)(nil).getPath))
}

// getSetupDone mocks base method.
func (m *MockSessionI) getSetupDone() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSetupDone")
	ret0, _ := ret[0].(bool)
	return ret0
}

// getSetupDone indicates an expected call of getSetupDone.
func (mr *MockSessionIMockRecorder) getSetupDone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSetupDone", reflect.TypeOf((*MockSessionI)(nil).getSetupDone))
}

// onControlMessage mocks base method.
func (m *MockSessionI) onControlMessage(arg0 wire.ControlMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "onControlMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// onControlMessage indicates an expected call of onControlMessage.
func (mr *MockSessionIMockRecorder) onControlMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onControlMessage", reflect.TypeOf((*MockSessionI)(nil).onControlMessage), arg0)
}

// rejectAnnouncement mocks base method.
func (m *MockSessionI) rejectAnnouncement(arg0 []string, arg1 uint64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rejectAnnouncement", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// rejectAnnouncement indicates an expected call of rejectAnnouncement.
func (mr *MockSessionIMockRecorder) rejectAnnouncement(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rejectAnnouncement", reflect.TypeOf((*MockSessionI)(nil).rejectAnnouncement), arg0, arg1, arg2)
}

// rejectAnnouncementSubscription mocks base method.
func (m *MockSessionI) rejectAnnouncementSubscription(arg0 []string, arg1 uint64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rejectAnnouncementSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// rejectAnnouncementSubscription indicates an expected call of rejectAnnouncementSubscription.
func (mr *MockSessionIMockRecorder) rejectAnnouncementSubscription(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rejectAnnouncementSubscription", reflect.TypeOf((*MockSessionI)(nil).rejectAnnouncementSubscription), arg0, arg1, arg2)
}

// rejectSubscription mocks base method.
func (m *MockSessionI) rejectSubscription(arg0, arg1 uint64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rejectSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// rejectSubscription indicates an expected call of rejectSubscription.
func (mr *MockSessionIMockRecorder) rejectSubscription(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rejectSubscription", reflect.TypeOf((*MockSessionI)(nil).rejectSubscription), arg0, arg1, arg2)
}

// remoteTrackBySubscribeID mocks base method.
func (m *MockSessionI) remoteTrackBySubscribeID(arg0 uint64) (*RemoteTrack, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "remoteTrackBySubscribeID", arg0)
	ret0, _ := ret[0].(*RemoteTrack)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// remoteTrackBySubscribeID indicates an expected call of remoteTrackBySubscribeID.
func (mr *MockSessionIMockRecorder) remoteTrackBySubscribeID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "remoteTrackBySubscribeID", reflect.TypeOf((*MockSessionI)(nil).remoteTrackBySubscribeID), arg0)
}

// remoteTrackByTrackAlias mocks base method.
func (m *MockSessionI) remoteTrackByTrackAlias(arg0 uint64) (*RemoteTrack, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "remoteTrackByTrackAlias", arg0)
	ret0, _ := ret[0].(*RemoteTrack)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// remoteTrackByTrackAlias indicates an expected call of remoteTrackByTrackAlias.
func (mr *MockSessionIMockRecorder) remoteTrackByTrackAlias(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "remoteTrackByTrackAlias", reflect.TypeOf((*MockSessionI)(nil).remoteTrackByTrackAlias), arg0)
}

// sendClientSetup mocks base method.
func (m *MockSessionI) sendClientSetup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendClientSetup")
	ret0, _ := ret[0].(error)
	return ret0
}

// sendClientSetup indicates an expected call of sendClientSetup.
func (mr *MockSessionIMockRecorder) sendClientSetup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendClientSetup", reflect.TypeOf((*MockSessionI)(nil).sendClientSetup))
}

// subscribe mocks base method.
func (m *MockSessionI) subscribe(arg0 *subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "subscribe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// subscribe indicates an expected call of subscribe.
func (mr *MockSessionIMockRecorder) subscribe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "subscribe", reflect.TypeOf((*MockSessionI)(nil).subscribe), arg0)
}

// subscribeAnnounces mocks base method.
func (m *MockSessionI) subscribeAnnounces(arg0 *announcementSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "subscribeAnnounces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// subscribeAnnounces indicates an expected call of subscribeAnnounces.
func (mr *MockSessionIMockRecorder) subscribeAnnounces(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "subscribeAnnounces", reflect.TypeOf((*MockSessionI)(nil).subscribeAnnounces), arg0)
}
