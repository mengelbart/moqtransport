// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ParserFactory)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -package moqtransport -self_package github.com/mengelbart/moqtransport -destination mock_parser_factory_test.go github.com/mengelbart/moqtransport ParserFactory
//
// Package moqtransport is a generated GoMock package.
package moqtransport

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockParserFactory is a mock of ParserFactory interface.
type MockParserFactory struct {
	ctrl     *gomock.Controller
	recorder *MockParserFactoryMockRecorder
}

// MockParserFactoryMockRecorder is the mock recorder for MockParserFactory.
type MockParserFactoryMockRecorder struct {
	mock *MockParserFactory
}

// NewMockParserFactory creates a new mock instance.
func NewMockParserFactory(ctrl *gomock.Controller) *MockParserFactory {
	mock := &MockParserFactory{ctrl: ctrl}
	mock.recorder = &MockParserFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParserFactory) EXPECT() *MockParserFactoryMockRecorder {
	return m.recorder
}

// new mocks base method.
func (m *MockParserFactory) new(arg0 messageReader) parser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "new", arg0)
	ret0, _ := ret[0].(parser)
	return ret0
}

// new indicates an expected call of new.
func (mr *MockParserFactoryMockRecorder) new(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "new", reflect.TypeOf((*MockParserFactory)(nil).new), arg0)
}
