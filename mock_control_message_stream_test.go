// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ControlMessageStream)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_control_message_stream_test.go github.com/mengelbart/moqtransport ControlMessageStream
//

package moqtransport

import (
	iter "iter"
	reflect "reflect"

	wire "github.com/mengelbart/moqtransport/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockControlMessageStream is a mock of ControlMessageStream interface.
type MockControlMessageStream struct {
	ctrl     *gomock.Controller
	recorder *MockControlMessageStreamMockRecorder
	isgomock struct{}
}

// MockControlMessageStreamMockRecorder is the mock recorder for MockControlMessageStream.
type MockControlMessageStreamMockRecorder struct {
	mock *MockControlMessageStream
}

// NewMockControlMessageStream creates a new mock instance.
func NewMockControlMessageStream(ctrl *gomock.Controller) *MockControlMessageStream {
	mock := &MockControlMessageStream{ctrl: ctrl}
	mock.recorder = &MockControlMessageStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlMessageStream) EXPECT() *MockControlMessageStreamMockRecorder {
	return m.recorder
}

// read mocks base method.
func (m *MockControlMessageStream) read() iter.Seq2[wire.ControlMessage, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "read")
	ret0, _ := ret[0].(iter.Seq2[wire.ControlMessage, error])
	return ret0
}

// read indicates an expected call of read.
func (mr *MockControlMessageStreamMockRecorder) read() *MockControlMessageStreamreadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "read", reflect.TypeOf((*MockControlMessageStream)(nil).read))
	return &MockControlMessageStreamreadCall{Call: call}
}

// MockControlMessageStreamreadCall wrap *gomock.Call
type MockControlMessageStreamreadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageStreamreadCall) Return(arg0 iter.Seq2[wire.ControlMessage, error]) *MockControlMessageStreamreadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageStreamreadCall) Do(f func() iter.Seq2[wire.ControlMessage, error]) *MockControlMessageStreamreadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageStreamreadCall) DoAndReturn(f func() iter.Seq2[wire.ControlMessage, error]) *MockControlMessageStreamreadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// write mocks base method.
func (m *MockControlMessageStream) write(arg0 wire.ControlMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// write indicates an expected call of write.
func (mr *MockControlMessageStreamMockRecorder) write(arg0 any) *MockControlMessageStreamwriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "write", reflect.TypeOf((*MockControlMessageStream)(nil).write), arg0)
	return &MockControlMessageStreamwriteCall{Call: call}
}

// MockControlMessageStreamwriteCall wrap *gomock.Call
type MockControlMessageStreamwriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageStreamwriteCall) Return(arg0 error) *MockControlMessageStreamwriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageStreamwriteCall) Do(f func(wire.ControlMessage) error) *MockControlMessageStreamwriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageStreamwriteCall) DoAndReturn(f func(wire.ControlMessage) error) *MockControlMessageStreamwriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
