// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ReceiveStream)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_receive_stream_test.go github.com/mengelbart/moqtransport ReceiveStream
//

package moqtransport

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReceiveStream is a mock of ReceiveStream interface.
type MockReceiveStream struct {
	ctrl     *gomock.Controller
	recorder *MockReceiveStreamMockRecorder
	isgomock struct{}
}

// MockReceiveStreamMockRecorder is the mock recorder for MockReceiveStream.
type MockReceiveStreamMockRecorder struct {
	mock *MockReceiveStream
}

// NewMockReceiveStream creates a new mock instance.
func NewMockReceiveStream(ctrl *gomock.Controller) *MockReceiveStream {
	mock := &MockReceiveStream{ctrl: ctrl}
	mock.recorder = &MockReceiveStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiveStream) EXPECT() *MockReceiveStreamMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockReceiveStream) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockReceiveStreamMockRecorder) Read(p any) *MockReceiveStreamReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockReceiveStream)(nil).Read), p)
	return &MockReceiveStreamReadCall{Call: call}
}

// MockReceiveStreamReadCall wrap *gomock.Call
type MockReceiveStreamReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReceiveStreamReadCall) Return(n int, err error) *MockReceiveStreamReadCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReceiveStreamReadCall) Do(f func([]byte) (int, error)) *MockReceiveStreamReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReceiveStreamReadCall) DoAndReturn(f func([]byte) (int, error)) *MockReceiveStreamReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockReceiveStream) Stop(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0)
}

// Stop indicates an expected call of Stop.
func (mr *MockReceiveStreamMockRecorder) Stop(arg0 any) *MockReceiveStreamStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockReceiveStream)(nil).Stop), arg0)
	return &MockReceiveStreamStopCall{Call: call}
}

// MockReceiveStreamStopCall wrap *gomock.Call
type MockReceiveStreamStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReceiveStreamStopCall) Return() *MockReceiveStreamStopCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReceiveStreamStopCall) Do(f func(uint32)) *MockReceiveStreamStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReceiveStreamStopCall) DoAndReturn(f func(uint32)) *MockReceiveStreamStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StreamID mocks base method.
func (m *MockReceiveStream) StreamID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// StreamID indicates an expected call of StreamID.
func (mr *MockReceiveStreamMockRecorder) StreamID() *MockReceiveStreamStreamIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamID", reflect.TypeOf((*MockReceiveStream)(nil).StreamID))
	return &MockReceiveStreamStreamIDCall{Call: call}
}

// MockReceiveStreamStreamIDCall wrap *gomock.Call
type MockReceiveStreamStreamIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReceiveStreamStreamIDCall) Return(arg0 uint64) *MockReceiveStreamStreamIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReceiveStreamStreamIDCall) Do(f func() uint64) *MockReceiveStreamStreamIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReceiveStreamStreamIDCall) DoAndReturn(f func() uint64) *MockReceiveStreamStreamIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
