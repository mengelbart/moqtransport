// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ControlMessageQueue)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_control_message_queue_test.go github.com/mengelbart/moqtransport ControlMessageQueue
//

package moqtransport

import (
	context "context"
	reflect "reflect"

	wire "github.com/mengelbart/moqtransport/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockControlMessageQueue is a mock of ControlMessageQueue interface.
type MockControlMessageQueue struct {
	ctrl     *gomock.Controller
	recorder *MockControlMessageQueueMockRecorder
	isgomock struct{}
}

// MockControlMessageQueueMockRecorder is the mock recorder for MockControlMessageQueue.
type MockControlMessageQueueMockRecorder struct {
	mock *MockControlMessageQueue
}

// NewMockControlMessageQueue creates a new mock instance.
func NewMockControlMessageQueue(ctrl *gomock.Controller) *MockControlMessageQueue {
	mock := &MockControlMessageQueue{ctrl: ctrl}
	mock.recorder = &MockControlMessageQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlMessageQueue) EXPECT() *MockControlMessageQueueMockRecorder {
	return m.recorder
}

// dequeue mocks base method.
func (m *MockControlMessageQueue) dequeue(arg0 context.Context) (wire.ControlMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dequeue", arg0)
	ret0, _ := ret[0].(wire.ControlMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// dequeue indicates an expected call of dequeue.
func (mr *MockControlMessageQueueMockRecorder) dequeue(arg0 any) *MockControlMessageQueuedequeueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dequeue", reflect.TypeOf((*MockControlMessageQueue)(nil).dequeue), arg0)
	return &MockControlMessageQueuedequeueCall{Call: call}
}

// MockControlMessageQueuedequeueCall wrap *gomock.Call
type MockControlMessageQueuedequeueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageQueuedequeueCall) Return(arg0 wire.ControlMessage, arg1 error) *MockControlMessageQueuedequeueCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageQueuedequeueCall) Do(f func(context.Context) (wire.ControlMessage, error)) *MockControlMessageQueuedequeueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageQueuedequeueCall) DoAndReturn(f func(context.Context) (wire.ControlMessage, error)) *MockControlMessageQueuedequeueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// enqueue mocks base method.
func (m *MockControlMessageQueue) enqueue(arg0 context.Context, arg1 wire.ControlMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enqueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// enqueue indicates an expected call of enqueue.
func (mr *MockControlMessageQueueMockRecorder) enqueue(arg0, arg1 any) *MockControlMessageQueueenqueueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enqueue", reflect.TypeOf((*MockControlMessageQueue)(nil).enqueue), arg0, arg1)
	return &MockControlMessageQueueenqueueCall{Call: call}
}

// MockControlMessageQueueenqueueCall wrap *gomock.Call
type MockControlMessageQueueenqueueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageQueueenqueueCall) Return(arg0 error) *MockControlMessageQueueenqueueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageQueueenqueueCall) Do(f func(context.Context, wire.ControlMessage) error) *MockControlMessageQueueenqueueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageQueueenqueueCall) DoAndReturn(f func(context.Context, wire.ControlMessage) error) *MockControlMessageQueueenqueueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
