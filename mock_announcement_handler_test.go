// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: AnnouncementHandler)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -package moqtransport -self_package github.com/mengelbart/moqtransport -destination mock_announcement_handler_test.go github.com/mengelbart/moqtransport AnnouncementHandler
//
// Package moqtransport is a generated GoMock package.
package moqtransport

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAnnouncementHandler is a mock of AnnouncementHandler interface.
type MockAnnouncementHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAnnouncementHandlerMockRecorder
}

// MockAnnouncementHandlerMockRecorder is the mock recorder for MockAnnouncementHandler.
type MockAnnouncementHandlerMockRecorder struct {
	mock *MockAnnouncementHandler
}

// NewMockAnnouncementHandler creates a new mock instance.
func NewMockAnnouncementHandler(ctrl *gomock.Controller) *MockAnnouncementHandler {
	mock := &MockAnnouncementHandler{ctrl: ctrl}
	mock.recorder = &MockAnnouncementHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnnouncementHandler) EXPECT() *MockAnnouncementHandlerMockRecorder {
	return m.recorder
}

// handle mocks base method.
func (m *MockAnnouncementHandler) handle(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// handle indicates an expected call of handle.
func (mr *MockAnnouncementHandlerMockRecorder) handle(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handle", reflect.TypeOf((*MockAnnouncementHandler)(nil).handle), arg0)
}
