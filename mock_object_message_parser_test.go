// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ObjectMessageParser)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_object_message_parser_test.go github.com/mengelbart/moqtransport ObjectMessageParser
//

package moqtransport

import (
	iter "iter"
	reflect "reflect"

	wire "github.com/mengelbart/moqtransport/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectMessageParser is a mock of ObjectMessageParser interface.
type MockObjectMessageParser struct {
	ctrl     *gomock.Controller
	recorder *MockObjectMessageParserMockRecorder
	isgomock struct{}
}

// MockObjectMessageParserMockRecorder is the mock recorder for MockObjectMessageParser.
type MockObjectMessageParserMockRecorder struct {
	mock *MockObjectMessageParser
}

// NewMockObjectMessageParser creates a new mock instance.
func NewMockObjectMessageParser(ctrl *gomock.Controller) *MockObjectMessageParser {
	mock := &MockObjectMessageParser{ctrl: ctrl}
	mock.recorder = &MockObjectMessageParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectMessageParser) EXPECT() *MockObjectMessageParserMockRecorder {
	return m.recorder
}

// Messages mocks base method.
func (m *MockObjectMessageParser) Messages() iter.Seq2[*wire.ObjectMessage, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages")
	ret0, _ := ret[0].(iter.Seq2[*wire.ObjectMessage, error])
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *MockObjectMessageParserMockRecorder) Messages() *MockObjectMessageParserMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockObjectMessageParser)(nil).Messages))
	return &MockObjectMessageParserMessagesCall{Call: call}
}

// MockObjectMessageParserMessagesCall wrap *gomock.Call
type MockObjectMessageParserMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectMessageParserMessagesCall) Return(arg0 iter.Seq2[*wire.ObjectMessage, error]) *MockObjectMessageParserMessagesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectMessageParserMessagesCall) Do(f func() iter.Seq2[*wire.ObjectMessage, error]) *MockObjectMessageParserMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectMessageParserMessagesCall) DoAndReturn(f func() iter.Seq2[*wire.ObjectMessage, error]) *MockObjectMessageParserMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SubscribeID mocks base method.
func (m *MockObjectMessageParser) SubscribeID() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeID indicates an expected call of SubscribeID.
func (mr *MockObjectMessageParserMockRecorder) SubscribeID() *MockObjectMessageParserSubscribeIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeID", reflect.TypeOf((*MockObjectMessageParser)(nil).SubscribeID))
	return &MockObjectMessageParserSubscribeIDCall{Call: call}
}

// MockObjectMessageParserSubscribeIDCall wrap *gomock.Call
type MockObjectMessageParserSubscribeIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectMessageParserSubscribeIDCall) Return(arg0 uint64, arg1 error) *MockObjectMessageParserSubscribeIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectMessageParserSubscribeIDCall) Do(f func() (uint64, error)) *MockObjectMessageParserSubscribeIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectMessageParserSubscribeIDCall) DoAndReturn(f func() (uint64, error)) *MockObjectMessageParserSubscribeIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TrackAlias mocks base method.
func (m *MockObjectMessageParser) TrackAlias() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackAlias")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackAlias indicates an expected call of TrackAlias.
func (mr *MockObjectMessageParserMockRecorder) TrackAlias() *MockObjectMessageParserTrackAliasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackAlias", reflect.TypeOf((*MockObjectMessageParser)(nil).TrackAlias))
	return &MockObjectMessageParserTrackAliasCall{Call: call}
}

// MockObjectMessageParserTrackAliasCall wrap *gomock.Call
type MockObjectMessageParserTrackAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectMessageParserTrackAliasCall) Return(arg0 uint64, arg1 error) *MockObjectMessageParserTrackAliasCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectMessageParserTrackAliasCall) Do(f func() (uint64, error)) *MockObjectMessageParserTrackAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectMessageParserTrackAliasCall) DoAndReturn(f func() (uint64, error)) *MockObjectMessageParserTrackAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Type mocks base method.
func (m *MockObjectMessageParser) Type() wire.StreamType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(wire.StreamType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockObjectMessageParserMockRecorder) Type() *MockObjectMessageParserTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockObjectMessageParser)(nil).Type))
	return &MockObjectMessageParserTypeCall{Call: call}
}

// MockObjectMessageParserTypeCall wrap *gomock.Call
type MockObjectMessageParserTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectMessageParserTypeCall) Return(arg0 wire.StreamType) *MockObjectMessageParserTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectMessageParserTypeCall) Do(f func() wire.StreamType) *MockObjectMessageParserTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectMessageParserTypeCall) DoAndReturn(f func() wire.StreamType) *MockObjectMessageParserTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
