// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: SessionCallbacks)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -package moqtransport -self_package github.com/mengelbart/moqtransport -destination mock_session_callbacks_test.go github.com/mengelbart/moqtransport SessionCallbacks
//

// Package moqtransport is a generated GoMock package.
package moqtransport

import (
	reflect "reflect"

	wire "github.com/mengelbart/moqtransport/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionCallbacks is a mock of SessionCallbacks interface.
type MockSessionCallbacks struct {
	ctrl     *gomock.Controller
	recorder *MockSessionCallbacksMockRecorder
	isgomock struct{}
}

// MockSessionCallbacksMockRecorder is the mock recorder for MockSessionCallbacks.
type MockSessionCallbacksMockRecorder struct {
	mock *MockSessionCallbacks
}

// NewMockSessionCallbacks creates a new mock instance.
func NewMockSessionCallbacks(ctrl *gomock.Controller) *MockSessionCallbacks {
	mock := &MockSessionCallbacks{ctrl: ctrl}
	mock.recorder = &MockSessionCallbacksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionCallbacks) EXPECT() *MockSessionCallbacksMockRecorder {
	return m.recorder
}

// onMessage mocks base method.
func (m *MockSessionCallbacks) onMessage(arg0 *Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onMessage", arg0)
}

// onMessage indicates an expected call of onMessage.
func (mr *MockSessionCallbacksMockRecorder) onMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onMessage", reflect.TypeOf((*MockSessionCallbacks)(nil).onMessage), arg0)
}

// onProtocolViolation mocks base method.
func (m *MockSessionCallbacks) onProtocolViolation(arg0 protocolError) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onProtocolViolation", arg0)
}

// onProtocolViolation indicates an expected call of onProtocolViolation.
func (mr *MockSessionCallbacksMockRecorder) onProtocolViolation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onProtocolViolation", reflect.TypeOf((*MockSessionCallbacks)(nil).onProtocolViolation), arg0)
}

// queueControlMessage mocks base method.
func (m *MockSessionCallbacks) queueControlMessage(arg0 wire.ControlMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "queueControlMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// queueControlMessage indicates an expected call of queueControlMessage.
func (mr *MockSessionCallbacksMockRecorder) queueControlMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "queueControlMessage", reflect.TypeOf((*MockSessionCallbacks)(nil).queueControlMessage), arg0)
}
