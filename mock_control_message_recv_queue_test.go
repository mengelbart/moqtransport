// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ControlMessageRecvQueue)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_control_message_recv_queue_test.go github.com/mengelbart/moqtransport ControlMessageRecvQueue
//

package moqtransport

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockControlMessageRecvQueue is a mock of ControlMessageRecvQueue interface.
type MockControlMessageRecvQueue[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockControlMessageRecvQueueMockRecorder[T]
	isgomock struct{}
}

// MockControlMessageRecvQueueMockRecorder is the mock recorder for MockControlMessageRecvQueue.
type MockControlMessageRecvQueueMockRecorder[T any] struct {
	mock *MockControlMessageRecvQueue[T]
}

// NewMockControlMessageRecvQueue creates a new mock instance.
func NewMockControlMessageRecvQueue[T any](ctrl *gomock.Controller) *MockControlMessageRecvQueue[T] {
	mock := &MockControlMessageRecvQueue[T]{ctrl: ctrl}
	mock.recorder = &MockControlMessageRecvQueueMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlMessageRecvQueue[T]) EXPECT() *MockControlMessageRecvQueueMockRecorder[T] {
	return m.recorder
}

// dequeue mocks base method.
func (m *MockControlMessageRecvQueue[T]) dequeue(arg0 context.Context) (*Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dequeue", arg0)
	ret0, _ := ret[0].(*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// dequeue indicates an expected call of dequeue.
func (mr *MockControlMessageRecvQueueMockRecorder[T]) dequeue(arg0 any) *MockControlMessageRecvQueuedequeueCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dequeue", reflect.TypeOf((*MockControlMessageRecvQueue[T])(nil).dequeue), arg0)
	return &MockControlMessageRecvQueuedequeueCall[T]{Call: call}
}

// MockControlMessageRecvQueuedequeueCall wrap *gomock.Call
type MockControlMessageRecvQueuedequeueCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageRecvQueuedequeueCall[T]) Return(arg0 *Message, arg1 error) *MockControlMessageRecvQueuedequeueCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageRecvQueuedequeueCall[T]) Do(f func(context.Context) (*Message, error)) *MockControlMessageRecvQueuedequeueCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageRecvQueuedequeueCall[T]) DoAndReturn(f func(context.Context) (*Message, error)) *MockControlMessageRecvQueuedequeueCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// enqueue mocks base method.
func (m *MockControlMessageRecvQueue[T]) enqueue(arg0 context.Context, arg1 *Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enqueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// enqueue indicates an expected call of enqueue.
func (mr *MockControlMessageRecvQueueMockRecorder[T]) enqueue(arg0, arg1 any) *MockControlMessageRecvQueueenqueueCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enqueue", reflect.TypeOf((*MockControlMessageRecvQueue[T])(nil).enqueue), arg0, arg1)
	return &MockControlMessageRecvQueueenqueueCall[T]{Call: call}
}

// MockControlMessageRecvQueueenqueueCall wrap *gomock.Call
type MockControlMessageRecvQueueenqueueCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageRecvQueueenqueueCall[T]) Return(arg0 error) *MockControlMessageRecvQueueenqueueCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageRecvQueueenqueueCall[T]) Do(f func(context.Context, *Message) error) *MockControlMessageRecvQueueenqueueCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageRecvQueueenqueueCall[T]) DoAndReturn(f func(context.Context, *Message) error) *MockControlMessageRecvQueueenqueueCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
