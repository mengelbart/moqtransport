// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: ControlMessageSendQueue)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_control_message_send_test.go github.com/mengelbart/moqtransport ControlMessageSendQueue
//

package moqtransport

import (
	context "context"
	reflect "reflect"

	wire "github.com/mengelbart/moqtransport/internal/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockControlMessageSendQueue is a mock of ControlMessageSendQueue interface.
type MockControlMessageSendQueue[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockControlMessageSendQueueMockRecorder[T]
	isgomock struct{}
}

// MockControlMessageSendQueueMockRecorder is the mock recorder for MockControlMessageSendQueue.
type MockControlMessageSendQueueMockRecorder[T any] struct {
	mock *MockControlMessageSendQueue[T]
}

// NewMockControlMessageSendQueue creates a new mock instance.
func NewMockControlMessageSendQueue[T any](ctrl *gomock.Controller) *MockControlMessageSendQueue[T] {
	mock := &MockControlMessageSendQueue[T]{ctrl: ctrl}
	mock.recorder = &MockControlMessageSendQueueMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControlMessageSendQueue[T]) EXPECT() *MockControlMessageSendQueueMockRecorder[T] {
	return m.recorder
}

// dequeue mocks base method.
func (m *MockControlMessageSendQueue[T]) dequeue(arg0 context.Context) (wire.ControlMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dequeue", arg0)
	ret0, _ := ret[0].(wire.ControlMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// dequeue indicates an expected call of dequeue.
func (mr *MockControlMessageSendQueueMockRecorder[T]) dequeue(arg0 any) *MockControlMessageSendQueuedequeueCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dequeue", reflect.TypeOf((*MockControlMessageSendQueue[T])(nil).dequeue), arg0)
	return &MockControlMessageSendQueuedequeueCall[T]{Call: call}
}

// MockControlMessageSendQueuedequeueCall wrap *gomock.Call
type MockControlMessageSendQueuedequeueCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageSendQueuedequeueCall[T]) Return(arg0 wire.ControlMessage, arg1 error) *MockControlMessageSendQueuedequeueCall[T] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageSendQueuedequeueCall[T]) Do(f func(context.Context) (wire.ControlMessage, error)) *MockControlMessageSendQueuedequeueCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageSendQueuedequeueCall[T]) DoAndReturn(f func(context.Context) (wire.ControlMessage, error)) *MockControlMessageSendQueuedequeueCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// enqueue mocks base method.
func (m *MockControlMessageSendQueue[T]) enqueue(arg0 context.Context, arg1 wire.ControlMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enqueue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// enqueue indicates an expected call of enqueue.
func (mr *MockControlMessageSendQueueMockRecorder[T]) enqueue(arg0, arg1 any) *MockControlMessageSendQueueenqueueCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enqueue", reflect.TypeOf((*MockControlMessageSendQueue[T])(nil).enqueue), arg0, arg1)
	return &MockControlMessageSendQueueenqueueCall[T]{Call: call}
}

// MockControlMessageSendQueueenqueueCall wrap *gomock.Call
type MockControlMessageSendQueueenqueueCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControlMessageSendQueueenqueueCall[T]) Return(arg0 error) *MockControlMessageSendQueueenqueueCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControlMessageSendQueueenqueueCall[T]) Do(f func(context.Context, wire.ControlMessage) error) *MockControlMessageSendQueueenqueueCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControlMessageSendQueueenqueueCall[T]) DoAndReturn(f func(context.Context, wire.ControlMessage) error) *MockControlMessageSendQueueenqueueCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
