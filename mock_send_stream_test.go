// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mengelbart/moqtransport (interfaces: SendStream)
//
// Generated by this command:
//
//	mockgen -build_flags=-tags=gomock -typed -package moqtransport -write_package_comment=false -self_package github.com/mengelbart/moqtransport -destination mock_send_stream_test.go github.com/mengelbart/moqtransport SendStream
//

package moqtransport

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSendStream is a mock of SendStream interface.
type MockSendStream struct {
	ctrl     *gomock.Controller
	recorder *MockSendStreamMockRecorder
	isgomock struct{}
}

// MockSendStreamMockRecorder is the mock recorder for MockSendStream.
type MockSendStreamMockRecorder struct {
	mock *MockSendStream
}

// NewMockSendStream creates a new mock instance.
func NewMockSendStream(ctrl *gomock.Controller) *MockSendStream {
	mock := &MockSendStream{ctrl: ctrl}
	mock.recorder = &MockSendStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendStream) EXPECT() *MockSendStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSendStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSendStreamMockRecorder) Close() *MockSendStreamCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSendStream)(nil).Close))
	return &MockSendStreamCloseCall{Call: call}
}

// MockSendStreamCloseCall wrap *gomock.Call
type MockSendStreamCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSendStreamCloseCall) Return(arg0 error) *MockSendStreamCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSendStreamCloseCall) Do(f func() error) *MockSendStreamCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSendStreamCloseCall) DoAndReturn(f func() error) *MockSendStreamCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reset mocks base method.
func (m *MockSendStream) Reset(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", arg0)
}

// Reset indicates an expected call of Reset.
func (mr *MockSendStreamMockRecorder) Reset(arg0 any) *MockSendStreamResetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockSendStream)(nil).Reset), arg0)
	return &MockSendStreamResetCall{Call: call}
}

// MockSendStreamResetCall wrap *gomock.Call
type MockSendStreamResetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSendStreamResetCall) Return() *MockSendStreamResetCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSendStreamResetCall) Do(f func(uint32)) *MockSendStreamResetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSendStreamResetCall) DoAndReturn(f func(uint32)) *MockSendStreamResetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StreamID mocks base method.
func (m *MockSendStream) StreamID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// StreamID indicates an expected call of StreamID.
func (mr *MockSendStreamMockRecorder) StreamID() *MockSendStreamStreamIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamID", reflect.TypeOf((*MockSendStream)(nil).StreamID))
	return &MockSendStreamStreamIDCall{Call: call}
}

// MockSendStreamStreamIDCall wrap *gomock.Call
type MockSendStreamStreamIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSendStreamStreamIDCall) Return(arg0 uint64) *MockSendStreamStreamIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSendStreamStreamIDCall) Do(f func() uint64) *MockSendStreamStreamIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSendStreamStreamIDCall) DoAndReturn(f func() uint64) *MockSendStreamStreamIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockSendStream) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockSendStreamMockRecorder) Write(p any) *MockSendStreamWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockSendStream)(nil).Write), p)
	return &MockSendStreamWriteCall{Call: call}
}

// MockSendStreamWriteCall wrap *gomock.Call
type MockSendStreamWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSendStreamWriteCall) Return(n int, err error) *MockSendStreamWriteCall {
	c.Call = c.Call.Return(n, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSendStreamWriteCall) Do(f func([]byte) (int, error)) *MockSendStreamWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSendStreamWriteCall) DoAndReturn(f func([]byte) (int, error)) *MockSendStreamWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
